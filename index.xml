<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Delphier.com on Delphier.com</title><link>https://www.delphier.com/</link><description>Recent content in Delphier.com on Delphier.com</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 29 Aug 2019 02:27:57 +0800</lastBuildDate><atom:link href="https://www.delphier.com/" rel="self" type="application/rss+xml"/><item><title>Git Reset 误操作后恢复数据</title><link>https://www.delphier.com/posts/2019/git-reset-recover/</link><pubDate>Thu, 29 Aug 2019 02:27:57 +0800</pubDate><guid>https://www.delphier.com/posts/2019/git-reset-recover/</guid><description>&lt;p&gt;运行 &lt;code&gt;git reset&lt;/code&gt; 后，在 SmartGit 里点了 Discard，而没有 Save Stash，结果发现刚刚建立的新文件全都没了，搜索了一圈发现是可以恢复的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先运行 &lt;code&gt;git reflog&lt;/code&gt; 命令查看所有的 HEAD 日志。&lt;/li&gt;
&lt;li&gt;记住你要恢复的那次 commit 的 7 位记录号。&lt;/li&gt;
&lt;li&gt;运行 &lt;code&gt;git reset --hard xxxxxxx&lt;/code&gt;， xxxxxxx 为刚才的记录号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OK，数据回来了！&lt;/p&gt;</description></item><item><title>使用 Cloudflare 进行 301 重定向</title><link>https://www.delphier.com/posts/2019/cloudflare-301-redirect/</link><pubDate>Thu, 29 Aug 2019 01:05:15 +0800</pubDate><guid>https://www.delphier.com/posts/2019/cloudflare-301-redirect/</guid><description>&lt;p&gt;使用 Cloudflare 可以将不带 www 的所有链接重定向到 www，或者反之将带 www 的所有链接重定向到不带 www 的裸域名，同时还可以包含子路径。&lt;/p&gt;
&lt;p&gt;方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先将域名的 DNS 服务器设置为 Cloudflare 的服务器，服务器名后台有说明。&lt;/li&gt;
&lt;li&gt;在后台的 DNS 页将域名的 @ 子域和 www 域都添加 A 记录或 CNAME 记录，比如你使用的 GitHub Pages，可以添加 CNAME 记录为 username.github.io，一定都要添加，否则不生效。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在 Page Rules 页添加页面规则，比如将不带 www 的 &lt;a href=&#34;https://delphier.com/xxxx/xxxx/&#34;&gt;https://delphier.com/xxxx/xxxx/&lt;/a&gt; 所有链接重定向到带 www 的 &lt;a href=&#34;https://www.delphier.com/xxxx/xxxx/&#34;&gt;https://www.delphier.com/xxxx/xxxx/&lt;/a&gt; ，重定向包含子路径，点 Create Page Rule 后如下设置：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;URL Matches&lt;/strong&gt;: delphier.com/*&lt;br /&gt;
&lt;strong&gt;Settings&lt;/strong&gt;: Forwarding URL&lt;br /&gt;
&lt;strong&gt;Status Code&lt;/strong&gt;: 301 Permanent Redirect&lt;br /&gt;
&lt;strong&gt;Destination URL&lt;/strong&gt;: &lt;a href=&#34;https://www.delphier.com/$1&#34;&gt;https://www.delphier.com/$1&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>使用 Hugo 建立站点并部署到 GitHub Pages</title><link>https://www.delphier.com/posts/2019/hugo-github-pages/</link><pubDate>Tue, 30 Jul 2019 23:01:41 +0800</pubDate><guid>https://www.delphier.com/posts/2019/hugo-github-pages/</guid><description>
&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 是一个开源的静态站点生成器，使用 Golang 编写，它的包只是一个简单的可执行文件，不需要安装其它依赖，使用简单，构建站点速度非常快且有很高的灵活性。Hugo 安装运行在本地电脑上，撰写内容并生成静态文件后，可以部署到自己的服务器或者 &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;。本文以 Windows 环境为例介绍使用及发布的全过程。&lt;/p&gt;
&lt;h2 id=&#34;安装-hugo&#34;&gt;安装 Hugo&lt;/h2&gt;
&lt;p&gt;到 &lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;Hugo Releases@Github&lt;/a&gt; 下载最新的安装包 &lt;code&gt;hugo_0.56.3_Windows-64bit.zip&lt;/code&gt;，如果你的 Hugo 主题使用到了 Sass/SCSS，下载带 &lt;code&gt;Extended&lt;/code&gt; 字样的安装包：&lt;code&gt;hugo_extended_0.56.3_Windows-64bit.zip&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;解压安装包后，将 Hugo.exe 放到你想要的文件夹，比如 D:\Apps\Hugo\Hugo.exe，同时将此文件夹添加到系统 PATH 环境变量。&lt;/p&gt;
&lt;h2 id=&#34;建立站点&#34;&gt;建立站点&lt;/h2&gt;
&lt;p&gt;选定一个文件夹来存储站点文件，如 D:\Sites，在此文件夹下运行以下命令建立站点：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new site MySite
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hugo 将在 D:\Sites\MySite 下生成站点，里面自动生成的目录和文件都有特定作用：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;content // 最终站点的内容，此文件夹的目录结构即为最终站点的目录结构；
static // 最终站点的静态文件，如 favicon.ico 及图片文件等；
themes // 存放主题
config.toml // 站点配置文件
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;设置站点&#34;&gt;设置站点&lt;/h2&gt;
&lt;p&gt;通过修改 &lt;code&gt;config.toml&lt;/code&gt; 来配置站点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;theme&lt;/code&gt; 站点主题：下载喜欢的主题放到站点 &lt;code&gt;themes&lt;/code&gt; 文件夹下，一个主题一个文件夹，文件夹名就是主题名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;publishDir&lt;/code&gt; 发布目录：最终静态站点的存储位置，默认是站点目录下的 &lt;code&gt;public&lt;/code&gt;，例如发布到 GitHub Pages，可更改为 &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其它的属性参考官方文档，或者主题的文档。&lt;/p&gt;
&lt;h2 id=&#34;添加站点内容&#34;&gt;添加站点内容&lt;/h2&gt;
&lt;p&gt;在站点目录下运行以下命令为站点添加内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo new posts/2019/hello-hugo.md
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;hugo new&lt;/code&gt; 后面的参数就是文章的路径，存储在站点 &lt;code&gt;content&lt;/code&gt;文件夹里面，以上命令生成的内容路径为：D:\Sites\MySite\content\posts\2019\hello-hugo.md。&lt;/p&gt;
&lt;h2 id=&#34;预览站点&#34;&gt;预览站点&lt;/h2&gt;
&lt;p&gt;可以启动本地 Hugo 服务器来实时预览编辑文章后的站点效果：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo server -D // -D 参数：包含状态为草稿的文章。修改文章的 draft: false 可更改草稿状态。
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;发布站点&#34;&gt;发布站点&lt;/h2&gt;
&lt;p&gt;生成最终静态站点：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hugo
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;部署到-github-pages&#34;&gt;部署到 GitHub Pages&lt;/h2&gt;
&lt;p&gt;生成的静态站点可以部署到自己的服务器，也可以部署到 &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; 这样的静态文件托管服务，方法很简单，将生成的静态站点 Push 到 &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; 仓库即可。&lt;/p&gt;
&lt;p&gt;部署到 GitHub Pages 需要注意以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立 &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; 时，仓库必须为公共库，私有库是无法使用 Pages 的。&lt;/li&gt;
&lt;li&gt;在 GitHub Pages 绑定自定义域名并强制 HTTPS 后，如果没有生效，你可以试着关闭浏览器重新打开，或者清空浏览器 DNS 缓存试一下。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其它&#34;&gt;其它&lt;/h2&gt;
&lt;p&gt;建议将站点进行 Git 版本控制，同时将 theme 和 publishDir 添加为子模块，方便更新与管理：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule add https://github.com/.........
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参考资料：&lt;br /&gt;
&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;Hugo 文档：Quick Start&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://inside.getambassador.com/creating-and-deploying-your-first-hugo-site-to-github-pages-1e1f496cf88d&#34;&gt;Creating and deploying your first Hugo site to Github pages&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Hello Hugo!</title><link>https://www.delphier.com/posts/2019/hello-hugo/</link><pubDate>Tue, 30 Jul 2019 22:01:41 +0800</pubDate><guid>https://www.delphier.com/posts/2019/hello-hugo/</guid><description>&lt;p&gt;Hello Hugo!&lt;/p&gt;</description></item></channel></rss>